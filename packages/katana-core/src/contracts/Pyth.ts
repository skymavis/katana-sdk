/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace PythInternalStructs {
  export type DataSourceStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    emitterAddress: PromiseOrValue<BytesLike>;
  };

  export type DataSourceStructOutput = [number, string] & {
    chainId: number;
    emitterAddress: string;
  };
}

export declare namespace PythStructs {
  export type PriceStruct = {
    price: PromiseOrValue<BigNumberish>;
    conf: PromiseOrValue<BigNumberish>;
    expo: PromiseOrValue<BigNumberish>;
    publishTime: PromiseOrValue<BigNumberish>;
  };

  export type PriceStructOutput = [BigNumber, BigNumber, number, BigNumber] & {
    price: BigNumber;
    conf: BigNumber;
    expo: number;
    publishTime: BigNumber;
  };

  export type PriceFeedStruct = {
    id: PromiseOrValue<BytesLike>;
    price: PythStructs.PriceStruct;
    emaPrice: PythStructs.PriceStruct;
  };

  export type PriceFeedStructOutput = [
    string,
    PythStructs.PriceStructOutput,
    PythStructs.PriceStructOutput
  ] & {
    id: string;
    price: PythStructs.PriceStructOutput;
    emaPrice: PythStructs.PriceStructOutput;
  };
}

export declare namespace PythGovernanceInstructions {
  export type AuthorizeGovernanceDataSourceTransferPayloadStruct = {
    claimVaa: PromiseOrValue<BytesLike>;
  };

  export type AuthorizeGovernanceDataSourceTransferPayloadStructOutput = [
    string
  ] & { claimVaa: string };

  export type GovernanceInstructionStruct = {
    module: PromiseOrValue<BigNumberish>;
    action: PromiseOrValue<BigNumberish>;
    targetChainId: PromiseOrValue<BigNumberish>;
    payload: PromiseOrValue<BytesLike>;
  };

  export type GovernanceInstructionStructOutput = [
    number,
    number,
    number,
    string
  ] & {
    module: number;
    action: number;
    targetChainId: number;
    payload: string;
  };

  export type RequestGovernanceDataSourceTransferPayloadStruct = {
    governanceDataSourceIndex: PromiseOrValue<BigNumberish>;
  };

  export type RequestGovernanceDataSourceTransferPayloadStructOutput = [
    number
  ] & { governanceDataSourceIndex: number };

  export type SetDataSourcesPayloadStruct = {
    dataSources: PythInternalStructs.DataSourceStruct[];
  };

  export type SetDataSourcesPayloadStructOutput = [
    PythInternalStructs.DataSourceStructOutput[]
  ] & { dataSources: PythInternalStructs.DataSourceStructOutput[] };

  export type SetFeePayloadStruct = { newFee: PromiseOrValue<BigNumberish> };

  export type SetFeePayloadStructOutput = [BigNumber] & { newFee: BigNumber };

  export type SetValidPeriodPayloadStruct = {
    newValidPeriod: PromiseOrValue<BigNumberish>;
  };

  export type SetValidPeriodPayloadStructOutput = [BigNumber] & {
    newValidPeriod: BigNumber;
  };

  export type SetWormholeAddressPayloadStruct = {
    newWormholeAddress: PromiseOrValue<string>;
  };

  export type SetWormholeAddressPayloadStructOutput = [string] & {
    newWormholeAddress: string;
  };

  export type UpgradeContractPayloadStruct = {
    newImplementation: PromiseOrValue<string>;
  };

  export type UpgradeContractPayloadStructOutput = [string] & {
    newImplementation: string;
  };
}

export interface PythInterface extends utils.Interface {
  functions: {
    "chainId()": FunctionFragment;
    "executeGovernanceInstruction(bytes)": FunctionFragment;
    "getEmaPrice(bytes32)": FunctionFragment;
    "getEmaPriceNoOlderThan(bytes32,uint256)": FunctionFragment;
    "getEmaPriceUnsafe(bytes32)": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "getPriceNoOlderThan(bytes32,uint256)": FunctionFragment;
    "getPriceUnsafe(bytes32)": FunctionFragment;
    "getUpdateFee(bytes[])": FunctionFragment;
    "getUpdateFee(uint256)": FunctionFragment;
    "getValidTimePeriod()": FunctionFragment;
    "governanceDataSource()": FunctionFragment;
    "governanceDataSourceIndex()": FunctionFragment;
    "hashDataSource((uint16,bytes32))": FunctionFragment;
    "initialize(address,uint16[],bytes32[],uint16,bytes32,uint64,uint256,uint256)": FunctionFragment;
    "isValidDataSource(uint16,bytes32)": FunctionFragment;
    "isValidGovernanceDataSource(uint16,bytes32)": FunctionFragment;
    "lastExecutedGovernanceSequence()": FunctionFragment;
    "latestPriceInfoPublishTime(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "parseAuthorizeGovernanceDataSourceTransferPayload(bytes)": FunctionFragment;
    "parseGovernanceInstruction(bytes)": FunctionFragment;
    "parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)": FunctionFragment;
    "parseRequestGovernanceDataSourceTransferPayload(bytes)": FunctionFragment;
    "parseSetDataSourcesPayload(bytes)": FunctionFragment;
    "parseSetFeePayload(bytes)": FunctionFragment;
    "parseSetValidPeriodPayload(bytes)": FunctionFragment;
    "parseSetWormholeAddressPayload(bytes)": FunctionFragment;
    "parseUpgradeContractPayload(bytes)": FunctionFragment;
    "priceFeedExists(bytes32)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "pythUpgradableMagic()": FunctionFragment;
    "queryPriceFeed(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "singleUpdateFeeInWei()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePriceFeeds(bytes[])": FunctionFragment;
    "updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "validDataSources()": FunctionFragment;
    "validTimePeriodSeconds()": FunctionFragment;
    "version()": FunctionFragment;
    "wormhole()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "chainId"
      | "executeGovernanceInstruction"
      | "getEmaPrice"
      | "getEmaPriceNoOlderThan"
      | "getEmaPriceUnsafe"
      | "getPrice"
      | "getPriceNoOlderThan"
      | "getPriceUnsafe"
      | "getUpdateFee(bytes[])"
      | "getUpdateFee(uint256)"
      | "getValidTimePeriod"
      | "governanceDataSource"
      | "governanceDataSourceIndex"
      | "hashDataSource"
      | "initialize"
      | "isValidDataSource"
      | "isValidGovernanceDataSource"
      | "lastExecutedGovernanceSequence"
      | "latestPriceInfoPublishTime"
      | "owner"
      | "parseAuthorizeGovernanceDataSourceTransferPayload"
      | "parseGovernanceInstruction"
      | "parsePriceFeedUpdates"
      | "parseRequestGovernanceDataSourceTransferPayload"
      | "parseSetDataSourcesPayload"
      | "parseSetFeePayload"
      | "parseSetValidPeriodPayload"
      | "parseSetWormholeAddressPayload"
      | "parseUpgradeContractPayload"
      | "priceFeedExists"
      | "proxiableUUID"
      | "pythUpgradableMagic"
      | "queryPriceFeed"
      | "renounceOwnership"
      | "singleUpdateFeeInWei"
      | "transferOwnership"
      | "updatePriceFeeds"
      | "updatePriceFeedsIfNecessary"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "validDataSources"
      | "validTimePeriodSeconds"
      | "version"
      | "wormhole"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeGovernanceInstruction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmaPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmaPriceNoOlderThan",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmaPriceUnsafe",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceNoOlderThan",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceUnsafe",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateFee(bytes[])",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateFee(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidTimePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceDataSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceDataSourceIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashDataSource",
    values: [PythInternalStructs.DataSourceStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidDataSource",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidGovernanceDataSource",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastExecutedGovernanceSequence",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestPriceInfoPublishTime",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseAuthorizeGovernanceDataSourceTransferPayload",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseGovernanceInstruction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parsePriceFeedUpdates",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "parseRequestGovernanceDataSourceTransferPayload",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseSetDataSourcesPayload",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseSetFeePayload",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseSetValidPeriodPayload",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseSetWormholeAddressPayload",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "parseUpgradeContractPayload",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedExists",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pythUpgradableMagic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryPriceFeed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "singleUpdateFeeInWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeeds",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeedsIfNecessary",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "validDataSources",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validTimePeriodSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;

  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeGovernanceInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmaPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmaPriceNoOlderThan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmaPriceUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceNoOlderThan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateFee(bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateFee(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidTimePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceDataSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceDataSourceIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashDataSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidDataSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidGovernanceDataSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastExecutedGovernanceSequence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPriceInfoPublishTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseAuthorizeGovernanceDataSourceTransferPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseGovernanceInstruction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parsePriceFeedUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseRequestGovernanceDataSourceTransferPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseSetDataSourcesPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseSetFeePayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseSetValidPeriodPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseSetWormholeAddressPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseUpgradeContractPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pythUpgradableMagic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singleUpdateFeeInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeedsIfNecessary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validDataSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validTimePeriodSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BatchPriceFeedUpdate(uint16,uint64)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ContractUpgraded(address,address)": EventFragment;
    "DataSourcesSet(tuple[],tuple[])": EventFragment;
    "FeeSet(uint256,uint256)": EventFragment;
    "GovernanceDataSourceSet(tuple,tuple,uint64)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceFeedUpdate(bytes32,uint64,int64,uint64)": EventFragment;
    "Upgraded(address)": EventFragment;
    "ValidPeriodSet(uint256,uint256)": EventFragment;
    "WormholeAddressSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchPriceFeedUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataSourcesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceDataSourceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidPeriodSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WormholeAddressSet"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BatchPriceFeedUpdateEventObject {
  chainId: number;
  sequenceNumber: BigNumber;
}
export type BatchPriceFeedUpdateEvent = TypedEvent<
  [number, BigNumber],
  BatchPriceFeedUpdateEventObject
>;

export type BatchPriceFeedUpdateEventFilter =
  TypedEventFilter<BatchPriceFeedUpdateEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ContractUpgradedEventObject {
  oldImplementation: string;
  newImplementation: string;
}
export type ContractUpgradedEvent = TypedEvent<
  [string, string],
  ContractUpgradedEventObject
>;

export type ContractUpgradedEventFilter =
  TypedEventFilter<ContractUpgradedEvent>;

export interface DataSourcesSetEventObject {
  oldDataSources: PythInternalStructs.DataSourceStructOutput[];
  newDataSources: PythInternalStructs.DataSourceStructOutput[];
}
export type DataSourcesSetEvent = TypedEvent<
  [
    PythInternalStructs.DataSourceStructOutput[],
    PythInternalStructs.DataSourceStructOutput[]
  ],
  DataSourcesSetEventObject
>;

export type DataSourcesSetEventFilter = TypedEventFilter<DataSourcesSetEvent>;

export interface FeeSetEventObject {
  oldFee: BigNumber;
  newFee: BigNumber;
}
export type FeeSetEvent = TypedEvent<[BigNumber, BigNumber], FeeSetEventObject>;

export type FeeSetEventFilter = TypedEventFilter<FeeSetEvent>;

export interface GovernanceDataSourceSetEventObject {
  oldDataSource: PythInternalStructs.DataSourceStructOutput;
  newDataSource: PythInternalStructs.DataSourceStructOutput;
  initialSequence: BigNumber;
}
export type GovernanceDataSourceSetEvent = TypedEvent<
  [
    PythInternalStructs.DataSourceStructOutput,
    PythInternalStructs.DataSourceStructOutput,
    BigNumber
  ],
  GovernanceDataSourceSetEventObject
>;

export type GovernanceDataSourceSetEventFilter =
  TypedEventFilter<GovernanceDataSourceSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PriceFeedUpdateEventObject {
  id: string;
  publishTime: BigNumber;
  price: BigNumber;
  conf: BigNumber;
}
export type PriceFeedUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PriceFeedUpdateEventObject
>;

export type PriceFeedUpdateEventFilter = TypedEventFilter<PriceFeedUpdateEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ValidPeriodSetEventObject {
  oldValidPeriod: BigNumber;
  newValidPeriod: BigNumber;
}
export type ValidPeriodSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  ValidPeriodSetEventObject
>;

export type ValidPeriodSetEventFilter = TypedEventFilter<ValidPeriodSetEvent>;

export interface WormholeAddressSetEventObject {
  oldWormholeAddress: string;
  newWormholeAddress: string;
}
export type WormholeAddressSetEvent = TypedEvent<
  [string, string],
  WormholeAddressSetEventObject
>;

export type WormholeAddressSetEventFilter =
  TypedEventFilter<WormholeAddressSetEvent>;

export interface Pyth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PythInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chainId(overrides?: CallOverrides): Promise<[number]>;

    executeGovernanceInstruction(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEmaPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythStructs.PriceStructOutput] & { price: PythStructs.PriceStructOutput }
    >;

    getEmaPriceNoOlderThan(
      id: PromiseOrValue<BytesLike>,
      age: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [PythStructs.PriceStructOutput] & { price: PythStructs.PriceStructOutput }
    >;

    getEmaPriceUnsafe(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythStructs.PriceStructOutput] & { price: PythStructs.PriceStructOutput }
    >;

    getPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythStructs.PriceStructOutput] & { price: PythStructs.PriceStructOutput }
    >;

    getPriceNoOlderThan(
      id: PromiseOrValue<BytesLike>,
      age: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [PythStructs.PriceStructOutput] & { price: PythStructs.PriceStructOutput }
    >;

    getPriceUnsafe(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythStructs.PriceStructOutput] & { price: PythStructs.PriceStructOutput }
    >;

    "getUpdateFee(bytes[])"(
      updateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { feeAmount: BigNumber }>;

    "getUpdateFee(uint256)"(
      updateDataSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { feeAmount: BigNumber }>;

    getValidTimePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    governanceDataSource(
      overrides?: CallOverrides
    ): Promise<[PythInternalStructs.DataSourceStructOutput]>;

    governanceDataSourceIndex(overrides?: CallOverrides): Promise<[number]>;

    hashDataSource(
      ds: PythInternalStructs.DataSourceStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      wormhole: PromiseOrValue<string>,
      dataSourceEmitterChainIds: PromiseOrValue<BigNumberish>[],
      dataSourceEmitterAddresses: PromiseOrValue<BytesLike>[],
      governanceEmitterChainId: PromiseOrValue<BigNumberish>,
      governanceEmitterAddress: PromiseOrValue<BytesLike>,
      governanceInitialSequence: PromiseOrValue<BigNumberish>,
      validTimePeriodSeconds: PromiseOrValue<BigNumberish>,
      singleUpdateFeeInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isValidDataSource(
      dataSourceChainId: PromiseOrValue<BigNumberish>,
      dataSourceEmitterAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidGovernanceDataSource(
      governanceChainId: PromiseOrValue<BigNumberish>,
      governanceEmitterAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastExecutedGovernanceSequence(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    latestPriceInfoPublishTime(
      priceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parseAuthorizeGovernanceDataSourceTransferPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        PythGovernanceInstructions.AuthorizeGovernanceDataSourceTransferPayloadStructOutput
      ] & {
        sgds: PythGovernanceInstructions.AuthorizeGovernanceDataSourceTransferPayloadStructOutput;
      }
    >;

    parseGovernanceInstruction(
      encodedInstruction: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythGovernanceInstructions.GovernanceInstructionStructOutput] & {
        gi: PythGovernanceInstructions.GovernanceInstructionStructOutput;
      }
    >;

    parsePriceFeedUpdates(
      updateData: PromiseOrValue<BytesLike>[],
      priceIds: PromiseOrValue<BytesLike>[],
      minPublishTime: PromiseOrValue<BigNumberish>,
      maxPublishTime: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    parseRequestGovernanceDataSourceTransferPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        PythGovernanceInstructions.RequestGovernanceDataSourceTransferPayloadStructOutput
      ] & {
        sgdsClaim: PythGovernanceInstructions.RequestGovernanceDataSourceTransferPayloadStructOutput;
      }
    >;

    parseSetDataSourcesPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythGovernanceInstructions.SetDataSourcesPayloadStructOutput] & {
        sds: PythGovernanceInstructions.SetDataSourcesPayloadStructOutput;
      }
    >;

    parseSetFeePayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythGovernanceInstructions.SetFeePayloadStructOutput] & {
        sf: PythGovernanceInstructions.SetFeePayloadStructOutput;
      }
    >;

    parseSetValidPeriodPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythGovernanceInstructions.SetValidPeriodPayloadStructOutput] & {
        svp: PythGovernanceInstructions.SetValidPeriodPayloadStructOutput;
      }
    >;

    parseSetWormholeAddressPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythGovernanceInstructions.SetWormholeAddressPayloadStructOutput] & {
        sw: PythGovernanceInstructions.SetWormholeAddressPayloadStructOutput;
      }
    >;

    parseUpgradeContractPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythGovernanceInstructions.UpgradeContractPayloadStructOutput] & {
        uc: PythGovernanceInstructions.UpgradeContractPayloadStructOutput;
      }
    >;

    priceFeedExists(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    pythUpgradableMagic(overrides?: CallOverrides): Promise<[number]>;

    queryPriceFeed(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [PythStructs.PriceFeedStructOutput] & {
        priceFeed: PythStructs.PriceFeedStructOutput;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    singleUpdateFeeInWei(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePriceFeeds(
      updateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePriceFeedsIfNecessary(
      updateData: PromiseOrValue<BytesLike>[],
      priceIds: PromiseOrValue<BytesLike>[],
      publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validDataSources(
      overrides?: CallOverrides
    ): Promise<[PythInternalStructs.DataSourceStructOutput[]]>;

    validTimePeriodSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    wormhole(overrides?: CallOverrides): Promise<[string]>;
  };

  chainId(overrides?: CallOverrides): Promise<number>;

  executeGovernanceInstruction(
    encodedVM: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEmaPrice(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythStructs.PriceStructOutput>;

  getEmaPriceNoOlderThan(
    id: PromiseOrValue<BytesLike>,
    age: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PythStructs.PriceStructOutput>;

  getEmaPriceUnsafe(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythStructs.PriceStructOutput>;

  getPrice(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythStructs.PriceStructOutput>;

  getPriceNoOlderThan(
    id: PromiseOrValue<BytesLike>,
    age: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PythStructs.PriceStructOutput>;

  getPriceUnsafe(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythStructs.PriceStructOutput>;

  "getUpdateFee(bytes[])"(
    updateData: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUpdateFee(uint256)"(
    updateDataSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValidTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  governanceDataSource(
    overrides?: CallOverrides
  ): Promise<PythInternalStructs.DataSourceStructOutput>;

  governanceDataSourceIndex(overrides?: CallOverrides): Promise<number>;

  hashDataSource(
    ds: PythInternalStructs.DataSourceStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    wormhole: PromiseOrValue<string>,
    dataSourceEmitterChainIds: PromiseOrValue<BigNumberish>[],
    dataSourceEmitterAddresses: PromiseOrValue<BytesLike>[],
    governanceEmitterChainId: PromiseOrValue<BigNumberish>,
    governanceEmitterAddress: PromiseOrValue<BytesLike>,
    governanceInitialSequence: PromiseOrValue<BigNumberish>,
    validTimePeriodSeconds: PromiseOrValue<BigNumberish>,
    singleUpdateFeeInWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isValidDataSource(
    dataSourceChainId: PromiseOrValue<BigNumberish>,
    dataSourceEmitterAddress: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidGovernanceDataSource(
    governanceChainId: PromiseOrValue<BigNumberish>,
    governanceEmitterAddress: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastExecutedGovernanceSequence(overrides?: CallOverrides): Promise<BigNumber>;

  latestPriceInfoPublishTime(
    priceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  parseAuthorizeGovernanceDataSourceTransferPayload(
    encodedPayload: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythGovernanceInstructions.AuthorizeGovernanceDataSourceTransferPayloadStructOutput>;

  parseGovernanceInstruction(
    encodedInstruction: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythGovernanceInstructions.GovernanceInstructionStructOutput>;

  parsePriceFeedUpdates(
    updateData: PromiseOrValue<BytesLike>[],
    priceIds: PromiseOrValue<BytesLike>[],
    minPublishTime: PromiseOrValue<BigNumberish>,
    maxPublishTime: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  parseRequestGovernanceDataSourceTransferPayload(
    encodedPayload: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythGovernanceInstructions.RequestGovernanceDataSourceTransferPayloadStructOutput>;

  parseSetDataSourcesPayload(
    encodedPayload: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythGovernanceInstructions.SetDataSourcesPayloadStructOutput>;

  parseSetFeePayload(
    encodedPayload: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythGovernanceInstructions.SetFeePayloadStructOutput>;

  parseSetValidPeriodPayload(
    encodedPayload: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythGovernanceInstructions.SetValidPeriodPayloadStructOutput>;

  parseSetWormholeAddressPayload(
    encodedPayload: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythGovernanceInstructions.SetWormholeAddressPayloadStructOutput>;

  parseUpgradeContractPayload(
    encodedPayload: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythGovernanceInstructions.UpgradeContractPayloadStructOutput>;

  priceFeedExists(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  pythUpgradableMagic(overrides?: CallOverrides): Promise<number>;

  queryPriceFeed(
    id: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<PythStructs.PriceFeedStructOutput>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  singleUpdateFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePriceFeeds(
    updateData: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePriceFeedsIfNecessary(
    updateData: PromiseOrValue<BytesLike>[],
    priceIds: PromiseOrValue<BytesLike>[],
    publishTimes: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validDataSources(
    overrides?: CallOverrides
  ): Promise<PythInternalStructs.DataSourceStructOutput[]>;

  validTimePeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  wormhole(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    chainId(overrides?: CallOverrides): Promise<number>;

    executeGovernanceInstruction(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getEmaPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythStructs.PriceStructOutput>;

    getEmaPriceNoOlderThan(
      id: PromiseOrValue<BytesLike>,
      age: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PythStructs.PriceStructOutput>;

    getEmaPriceUnsafe(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythStructs.PriceStructOutput>;

    getPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythStructs.PriceStructOutput>;

    getPriceNoOlderThan(
      id: PromiseOrValue<BytesLike>,
      age: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PythStructs.PriceStructOutput>;

    getPriceUnsafe(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythStructs.PriceStructOutput>;

    "getUpdateFee(bytes[])"(
      updateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUpdateFee(uint256)"(
      updateDataSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    governanceDataSource(
      overrides?: CallOverrides
    ): Promise<PythInternalStructs.DataSourceStructOutput>;

    governanceDataSourceIndex(overrides?: CallOverrides): Promise<number>;

    hashDataSource(
      ds: PythInternalStructs.DataSourceStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      wormhole: PromiseOrValue<string>,
      dataSourceEmitterChainIds: PromiseOrValue<BigNumberish>[],
      dataSourceEmitterAddresses: PromiseOrValue<BytesLike>[],
      governanceEmitterChainId: PromiseOrValue<BigNumberish>,
      governanceEmitterAddress: PromiseOrValue<BytesLike>,
      governanceInitialSequence: PromiseOrValue<BigNumberish>,
      validTimePeriodSeconds: PromiseOrValue<BigNumberish>,
      singleUpdateFeeInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isValidDataSource(
      dataSourceChainId: PromiseOrValue<BigNumberish>,
      dataSourceEmitterAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidGovernanceDataSource(
      governanceChainId: PromiseOrValue<BigNumberish>,
      governanceEmitterAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastExecutedGovernanceSequence(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestPriceInfoPublishTime(
      priceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    parseAuthorizeGovernanceDataSourceTransferPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythGovernanceInstructions.AuthorizeGovernanceDataSourceTransferPayloadStructOutput>;

    parseGovernanceInstruction(
      encodedInstruction: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythGovernanceInstructions.GovernanceInstructionStructOutput>;

    parsePriceFeedUpdates(
      updateData: PromiseOrValue<BytesLike>[],
      priceIds: PromiseOrValue<BytesLike>[],
      minPublishTime: PromiseOrValue<BigNumberish>,
      maxPublishTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PythStructs.PriceFeedStructOutput[]>;

    parseRequestGovernanceDataSourceTransferPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythGovernanceInstructions.RequestGovernanceDataSourceTransferPayloadStructOutput>;

    parseSetDataSourcesPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythGovernanceInstructions.SetDataSourcesPayloadStructOutput>;

    parseSetFeePayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythGovernanceInstructions.SetFeePayloadStructOutput>;

    parseSetValidPeriodPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythGovernanceInstructions.SetValidPeriodPayloadStructOutput>;

    parseSetWormholeAddressPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythGovernanceInstructions.SetWormholeAddressPayloadStructOutput>;

    parseUpgradeContractPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythGovernanceInstructions.UpgradeContractPayloadStructOutput>;

    priceFeedExists(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    pythUpgradableMagic(overrides?: CallOverrides): Promise<number>;

    queryPriceFeed(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PythStructs.PriceFeedStructOutput>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    singleUpdateFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceFeeds(
      updateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceFeedsIfNecessary(
      updateData: PromiseOrValue<BytesLike>[],
      priceIds: PromiseOrValue<BytesLike>[],
      publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validDataSources(
      overrides?: CallOverrides
    ): Promise<PythInternalStructs.DataSourceStructOutput[]>;

    validTimePeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    wormhole(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BatchPriceFeedUpdate(uint16,uint64)"(
      chainId?: null,
      sequenceNumber?: null
    ): BatchPriceFeedUpdateEventFilter;
    BatchPriceFeedUpdate(
      chainId?: null,
      sequenceNumber?: null
    ): BatchPriceFeedUpdateEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "ContractUpgraded(address,address)"(
      oldImplementation?: null,
      newImplementation?: null
    ): ContractUpgradedEventFilter;
    ContractUpgraded(
      oldImplementation?: null,
      newImplementation?: null
    ): ContractUpgradedEventFilter;

    "DataSourcesSet(tuple[],tuple[])"(
      oldDataSources?: null,
      newDataSources?: null
    ): DataSourcesSetEventFilter;
    DataSourcesSet(
      oldDataSources?: null,
      newDataSources?: null
    ): DataSourcesSetEventFilter;

    "FeeSet(uint256,uint256)"(oldFee?: null, newFee?: null): FeeSetEventFilter;
    FeeSet(oldFee?: null, newFee?: null): FeeSetEventFilter;

    "GovernanceDataSourceSet(tuple,tuple,uint64)"(
      oldDataSource?: null,
      newDataSource?: null,
      initialSequence?: null
    ): GovernanceDataSourceSetEventFilter;
    GovernanceDataSourceSet(
      oldDataSource?: null,
      newDataSource?: null,
      initialSequence?: null
    ): GovernanceDataSourceSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PriceFeedUpdate(bytes32,uint64,int64,uint64)"(
      id?: PromiseOrValue<BytesLike> | null,
      publishTime?: null,
      price?: null,
      conf?: null
    ): PriceFeedUpdateEventFilter;
    PriceFeedUpdate(
      id?: PromiseOrValue<BytesLike> | null,
      publishTime?: null,
      price?: null,
      conf?: null
    ): PriceFeedUpdateEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "ValidPeriodSet(uint256,uint256)"(
      oldValidPeriod?: null,
      newValidPeriod?: null
    ): ValidPeriodSetEventFilter;
    ValidPeriodSet(
      oldValidPeriod?: null,
      newValidPeriod?: null
    ): ValidPeriodSetEventFilter;

    "WormholeAddressSet(address,address)"(
      oldWormholeAddress?: null,
      newWormholeAddress?: null
    ): WormholeAddressSetEventFilter;
    WormholeAddressSet(
      oldWormholeAddress?: null,
      newWormholeAddress?: null
    ): WormholeAddressSetEventFilter;
  };

  estimateGas: {
    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    executeGovernanceInstruction(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEmaPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmaPriceNoOlderThan(
      id: PromiseOrValue<BytesLike>,
      age: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmaPriceUnsafe(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceNoOlderThan(
      id: PromiseOrValue<BytesLike>,
      age: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceUnsafe(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUpdateFee(bytes[])"(
      updateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUpdateFee(uint256)"(
      updateDataSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    governanceDataSource(overrides?: CallOverrides): Promise<BigNumber>;

    governanceDataSourceIndex(overrides?: CallOverrides): Promise<BigNumber>;

    hashDataSource(
      ds: PythInternalStructs.DataSourceStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      wormhole: PromiseOrValue<string>,
      dataSourceEmitterChainIds: PromiseOrValue<BigNumberish>[],
      dataSourceEmitterAddresses: PromiseOrValue<BytesLike>[],
      governanceEmitterChainId: PromiseOrValue<BigNumberish>,
      governanceEmitterAddress: PromiseOrValue<BytesLike>,
      governanceInitialSequence: PromiseOrValue<BigNumberish>,
      validTimePeriodSeconds: PromiseOrValue<BigNumberish>,
      singleUpdateFeeInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isValidDataSource(
      dataSourceChainId: PromiseOrValue<BigNumberish>,
      dataSourceEmitterAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidGovernanceDataSource(
      governanceChainId: PromiseOrValue<BigNumberish>,
      governanceEmitterAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastExecutedGovernanceSequence(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestPriceInfoPublishTime(
      priceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parseAuthorizeGovernanceDataSourceTransferPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseGovernanceInstruction(
      encodedInstruction: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parsePriceFeedUpdates(
      updateData: PromiseOrValue<BytesLike>[],
      priceIds: PromiseOrValue<BytesLike>[],
      minPublishTime: PromiseOrValue<BigNumberish>,
      maxPublishTime: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    parseRequestGovernanceDataSourceTransferPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseSetDataSourcesPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseSetFeePayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseSetValidPeriodPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseSetWormholeAddressPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseUpgradeContractPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeedExists(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    pythUpgradableMagic(overrides?: CallOverrides): Promise<BigNumber>;

    queryPriceFeed(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    singleUpdateFeeInWei(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePriceFeeds(
      updateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePriceFeedsIfNecessary(
      updateData: PromiseOrValue<BytesLike>[],
      priceIds: PromiseOrValue<BytesLike>[],
      publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validDataSources(overrides?: CallOverrides): Promise<BigNumber>;

    validTimePeriodSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    wormhole(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeGovernanceInstruction(
      encodedVM: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEmaPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmaPriceNoOlderThan(
      id: PromiseOrValue<BytesLike>,
      age: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmaPriceUnsafe(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceNoOlderThan(
      id: PromiseOrValue<BytesLike>,
      age: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceUnsafe(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUpdateFee(bytes[])"(
      updateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUpdateFee(uint256)"(
      updateDataSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidTimePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceDataSource(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceDataSourceIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashDataSource(
      ds: PythInternalStructs.DataSourceStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      wormhole: PromiseOrValue<string>,
      dataSourceEmitterChainIds: PromiseOrValue<BigNumberish>[],
      dataSourceEmitterAddresses: PromiseOrValue<BytesLike>[],
      governanceEmitterChainId: PromiseOrValue<BigNumberish>,
      governanceEmitterAddress: PromiseOrValue<BytesLike>,
      governanceInitialSequence: PromiseOrValue<BigNumberish>,
      validTimePeriodSeconds: PromiseOrValue<BigNumberish>,
      singleUpdateFeeInWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isValidDataSource(
      dataSourceChainId: PromiseOrValue<BigNumberish>,
      dataSourceEmitterAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidGovernanceDataSource(
      governanceChainId: PromiseOrValue<BigNumberish>,
      governanceEmitterAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastExecutedGovernanceSequence(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestPriceInfoPublishTime(
      priceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseAuthorizeGovernanceDataSourceTransferPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseGovernanceInstruction(
      encodedInstruction: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parsePriceFeedUpdates(
      updateData: PromiseOrValue<BytesLike>[],
      priceIds: PromiseOrValue<BytesLike>[],
      minPublishTime: PromiseOrValue<BigNumberish>,
      maxPublishTime: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    parseRequestGovernanceDataSourceTransferPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseSetDataSourcesPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseSetFeePayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseSetValidPeriodPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseSetWormholeAddressPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseUpgradeContractPayload(
      encodedPayload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeedExists(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pythUpgradableMagic(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryPriceFeed(
      id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    singleUpdateFeeInWei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceFeeds(
      updateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceFeedsIfNecessary(
      updateData: PromiseOrValue<BytesLike>[],
      priceIds: PromiseOrValue<BytesLike>[],
      publishTimes: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validDataSources(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validTimePeriodSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wormhole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
